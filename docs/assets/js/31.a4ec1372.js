(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{423:function(e,t,s){"use strict";s.r(t);var n=s(33),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"trigger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trigger"}},[e._v("#")]),e._v(" Trigger")]),e._v(" "),s("p",[e._v("A trigger listens for a specific event or result from a service and will start the process when a matching event or a task's result is emitted.\nThis trigger should be the first step of the process and only one trigger is possible per process.")]),e._v(" "),s("p",[e._v("A trigger can be:")]),e._v(" "),s("h3",{attrs:{id:"service-s-event"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service-s-event"}},[e._v("#")]),e._v(" Service's event")]),e._v(" "),s("p",[e._v("By setting the parameter "),s("code",[e._v("eventKey")]),e._v(", the process will be triggered every time the service emits the event defined by "),s("code",[e._v("eventKey")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"task-s-result"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#task-s-result"}},[e._v("#")]),e._v(" Task's result")]),e._v(" "),s("p",[e._v("By setting the parameter "),s("code",[e._v("taskKey")]),e._v(", the process will be triggered every time the service finishes to execute the task "),s("code",[e._v("taskKey")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"definition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#definition"}},[e._v("#")]),e._v(" Definition")]),e._v(" "),s("param-table",{attrs:{parameter:{fields:[{name:"type",fullType:'"trigger"'},{name:"key",description:"(optional) Key to identify this step",fullType:"string"},{name:"instanceHash",description:"Hash of the service's instance",fullType:"string"},{name:"instance",description:"Information about the instance to run. (Ignored if <code>instanceHash</code> is set)",fullType:"Instance"},{name:"eventKey",description:"Event's key to listen to. (only if <code>taskKey</code> is not set)",fullType:"string"},{name:"taskKey",description:"Task's key of the result to listen to. (only if <code>eventKey</code> is not set)",fullType:"string"}]},types:{Instance:{fields:[{name:"src",description:"Source of the service to deploy (only when <code>service</code> is not set)",fullType:"string"},{name:"service",description:"Service hash of the service to deploy (only when <code>src</code> is not set)",fullType:"string"},{name:"env",description:"Environment variable to use while deploying the service",label:"repeated",fullType:"string"}]}}}}),e._v(" "),s("h2",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" erc20"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("notification\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("steps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" trigger\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("instanceHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"H74Qqq8nT5JZ9GSJmuSWLN5benWZPkUb5pYcvQLsoZX"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("eventKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" eventX "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# listen to the event with the key `eventX`")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("taskKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" taskX "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# listen to the result of the task with the key `taskX`")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ...")]),e._v("\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("A process has only one trigger and it must be within the first step.")])])],1)}),[],!1,null,null,null);t.default=a.exports}}]);