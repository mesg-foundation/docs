(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{406:function(e,t,n){"use strict";n.r(t);var s=n(33),p=Object(s.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"instance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instance"}},[this._v("#")]),this._v(" instance")]),this._v(" "),t("api-doc",{attrs:{apifiles:{files:[{name:"protobuf/api/instance.proto",description:"",package:"mesg.api",hasEnums:!1,hasExtensions:!1,hasMessages:!0,hasServices:!0,enums:[],extensions:[],messages:[{name:"GetInstanceRequest",longName:"GetInstanceRequest",fullName:"mesg.api.GetInstanceRequest",description:"The request&rsquo;s data for the `Get` API.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"hash",description:"",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""}]},{name:"ListInstanceRequest",longName:"ListInstanceRequest",fullName:"mesg.api.ListInstanceRequest",description:"The request&rsquo;s data for the `List` API.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"filter",description:"Filter used to filter a list of instance.",label:"",type:"Filter",longType:"ListInstanceRequest.Filter",fullType:"mesg.api.ListInstanceRequest.Filter",ismap:!1,defaultValue:""}]},{name:"Filter",longName:"ListInstanceRequest.Filter",fullName:"mesg.api.ListInstanceRequest.Filter",description:"Filter contains filtering criteria.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"serviceHash",description:"Service hash to filter executions.",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""}]},{name:"ListInstanceResponse",longName:"ListInstanceResponse",fullName:"mesg.api.ListInstanceResponse",description:"The response&rsquo;s data for the `List` API.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"instances",description:"List of instances that match the request&rsquo;s filters.",label:"repeated",type:"Instance",longType:"mesg.types.Instance",fullType:"mesg.types.Instance",ismap:!1,defaultValue:""}]}],services:[{name:"Instance",longName:"Instance",fullName:"mesg.api.Instance",description:"This is the API to interact with the Instances.\n\nThis API is a [gRPC](https://grpc.io/) API.\n\nThe source file of this API is hosted on [GitHub](https://github.com/mesg-foundation/engine/blob/master/protobuf/api/instance.proto).",methods:[{name:"Get",description:"Get returns an Instance matching the criteria of the request.",requestType:"GetInstanceRequest",requestLongType:"GetInstanceRequest",requestFullType:"mesg.api.GetInstanceRequest",requestStreaming:!1,responseType:"Instance",responseLongType:".mesg.types.Instance",responseFullType:"mesg.types.Instance",responseStreaming:!1},{name:"List",description:"List returns all Instances matching the criteria of the request.",requestType:"ListInstanceRequest",requestLongType:"ListInstanceRequest",requestFullType:"mesg.api.ListInstanceRequest",requestStreaming:!1,responseType:"ListInstanceResponse",responseLongType:"ListInstanceResponse",responseFullType:"mesg.api.ListInstanceResponse",responseStreaming:!1}]}]}],scalarValueTypes:[{protoType:"double",notes:"",cppType:"double",csType:"double",goType:"float64",javaType:"double",phpType:"float",pythonType:"float",rubyType:"Float"},{protoType:"float",notes:"",cppType:"float",csType:"float",goType:"float32",javaType:"float",phpType:"float",pythonType:"float",rubyType:"Float"},{protoType:"int32",notes:"Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"int64",notes:"Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"uint32",notes:"Uses variable-length encoding.",cppType:"uint32",csType:"uint",goType:"uint32",javaType:"int",phpType:"integer",pythonType:"int/long",rubyType:"Bignum or Fixnum (as required)"},{protoType:"uint64",notes:"Uses variable-length encoding.",cppType:"uint64",csType:"ulong",goType:"uint64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sint32",notes:"Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sint64",notes:"Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"fixed32",notes:"Always four bytes. More efficient than uint32 if values are often greater than 2^28.",cppType:"uint32",csType:"uint",goType:"uint32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"fixed64",notes:"Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",cppType:"uint64",csType:"ulong",goType:"uint64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"sfixed32",notes:"Always four bytes.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sfixed64",notes:"Always eight bytes.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"bool",notes:"",cppType:"bool",csType:"bool",goType:"bool",javaType:"boolean",phpType:"boolean",pythonType:"boolean",rubyType:"TrueClass/FalseClass"},{protoType:"string",notes:"A string must always contain UTF-8 encoded or 7-bit ASCII text.",cppType:"string",csType:"string",goType:"string",javaType:"String",phpType:"string",pythonType:"str/unicode",rubyType:"String (UTF-8)"},{protoType:"bytes",notes:"May contain any arbitrary sequence of bytes.",cppType:"string",csType:"ByteString",goType:"[]byte",javaType:"ByteString",phpType:"string",pythonType:"str",rubyType:"String (ASCII-8BIT)"}]},typefiles:{files:[{name:"protobuf/types/instance.proto",description:"",package:"mesg.types",hasEnums:!1,hasExtensions:!1,hasMessages:!0,hasServices:!1,enums:[],extensions:[],messages:[{name:"Instance",longName:"Instance",fullName:"mesg.types.Instance",description:"Instance represents service&rsquo;s instance.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"hash",description:"",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""},{name:"serviceHash",description:"",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""},{name:"envHash",description:"",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""}]}],services:[]}],scalarValueTypes:[{protoType:"double",notes:"",cppType:"double",csType:"double",goType:"float64",javaType:"double",phpType:"float",pythonType:"float",rubyType:"Float"},{protoType:"float",notes:"",cppType:"float",csType:"float",goType:"float32",javaType:"float",phpType:"float",pythonType:"float",rubyType:"Float"},{protoType:"int32",notes:"Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"int64",notes:"Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"uint32",notes:"Uses variable-length encoding.",cppType:"uint32",csType:"uint",goType:"uint32",javaType:"int",phpType:"integer",pythonType:"int/long",rubyType:"Bignum or Fixnum (as required)"},{protoType:"uint64",notes:"Uses variable-length encoding.",cppType:"uint64",csType:"ulong",goType:"uint64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sint32",notes:"Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sint64",notes:"Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"fixed32",notes:"Always four bytes. More efficient than uint32 if values are often greater than 2^28.",cppType:"uint32",csType:"uint",goType:"uint32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"fixed64",notes:"Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",cppType:"uint64",csType:"ulong",goType:"uint64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"sfixed32",notes:"Always four bytes.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sfixed64",notes:"Always eight bytes.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"bool",notes:"",cppType:"bool",csType:"bool",goType:"bool",javaType:"boolean",phpType:"boolean",pythonType:"boolean",rubyType:"TrueClass/FalseClass"},{protoType:"string",notes:"A string must always contain UTF-8 encoded or 7-bit ASCII text.",cppType:"string",csType:"string",goType:"string",javaType:"String",phpType:"string",pythonType:"str/unicode",rubyType:"String (UTF-8)"},{protoType:"bytes",notes:"May contain any arbitrary sequence of bytes.",cppType:"string",csType:"ByteString",goType:"[]byte",javaType:"ByteString",phpType:"string",pythonType:"str",rubyType:"String (ASCII-8BIT)"}]}}})],1)}),[],!1,null,null,null);t.default=p.exports}}]);