(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{404:function(e,t,n){"use strict";n.r(t);var p=n(33),s=Object(p.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"event"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#event"}},[this._v("#")]),this._v(" event")]),this._v(" "),t("api-doc",{attrs:{apifiles:{files:[{name:"protobuf/api/event.proto",description:"",package:"mesg.api",hasEnums:!1,hasExtensions:!1,hasMessages:!0,hasServices:!0,enums:[],extensions:[],messages:[{name:"CreateEventRequest",longName:"CreateEventRequest",fullName:"mesg.api.CreateEventRequest",description:"CreateEventRequest defines request for execution update.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"instanceHash",description:"instanceHash is hash of instance that can proceed an execution.",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""},{name:"key",description:"key is the key of the event.",label:"",type:"string",longType:"string",fullType:"string",ismap:!1,defaultValue:""},{name:"data",description:"data is the data for the event.",label:"",type:"Struct",longType:"mesg.protobuf.Struct",fullType:"mesg.protobuf.Struct",ismap:!1,defaultValue:""}]},{name:"CreateEventResponse",longName:"CreateEventResponse",fullName:"mesg.api.CreateEventResponse",description:"CreateEventResponse defines response for execution update.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"hash",description:"Hash represents event.",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""}]},{name:"StreamEventRequest",longName:"StreamEventRequest",fullName:"mesg.api.StreamEventRequest",description:"StreamEventRequest defines request to retrieve a stream of events.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"filter",description:"Filter used to filter a stream of events.",label:"",type:"Filter",longType:"StreamEventRequest.Filter",fullType:"mesg.api.StreamEventRequest.Filter",ismap:!1,defaultValue:""}]},{name:"Filter",longName:"StreamEventRequest.Filter",fullName:"mesg.api.StreamEventRequest.Filter",description:"Filter contains filtering criteria.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"hash",description:"hash to filter events.",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""},{name:"instanceHash",description:"instance&rsquo;s hash to filter events.",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""},{name:"key",description:"key is the key of the event.",label:"",type:"string",longType:"string",fullType:"string",ismap:!1,defaultValue:""}]}],services:[{name:"Event",longName:"Event",fullName:"mesg.api.Event",description:"This is the API to interact with the Events.\n\nThis API is a [gRPC](https://grpc.io/) API.\n\nThe source file of this API is hosted on [GitHub](https://github.com/mesg-foundation/engine/blob/master/protobuf/api/event.proto).",methods:[{name:"Create",description:"Create creates event with data.",requestType:"CreateEventRequest",requestLongType:"CreateEventRequest",requestFullType:"mesg.api.CreateEventRequest",requestStreaming:!1,responseType:"CreateEventResponse",responseLongType:"CreateEventResponse",responseFullType:"mesg.api.CreateEventResponse",responseStreaming:!1},{name:"Stream",description:"Stream returns a stream of events that satisfy criteria\nspecified in a request.",requestType:"StreamEventRequest",requestLongType:"StreamEventRequest",requestFullType:"mesg.api.StreamEventRequest",requestStreaming:!1,responseType:"Event",responseLongType:".mesg.types.Event",responseFullType:"mesg.types.Event",responseStreaming:!0}]}]}],scalarValueTypes:[{protoType:"double",notes:"",cppType:"double",csType:"double",goType:"float64",javaType:"double",phpType:"float",pythonType:"float",rubyType:"Float"},{protoType:"float",notes:"",cppType:"float",csType:"float",goType:"float32",javaType:"float",phpType:"float",pythonType:"float",rubyType:"Float"},{protoType:"int32",notes:"Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"int64",notes:"Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"uint32",notes:"Uses variable-length encoding.",cppType:"uint32",csType:"uint",goType:"uint32",javaType:"int",phpType:"integer",pythonType:"int/long",rubyType:"Bignum or Fixnum (as required)"},{protoType:"uint64",notes:"Uses variable-length encoding.",cppType:"uint64",csType:"ulong",goType:"uint64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sint32",notes:"Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sint64",notes:"Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"fixed32",notes:"Always four bytes. More efficient than uint32 if values are often greater than 2^28.",cppType:"uint32",csType:"uint",goType:"uint32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"fixed64",notes:"Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",cppType:"uint64",csType:"ulong",goType:"uint64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"sfixed32",notes:"Always four bytes.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sfixed64",notes:"Always eight bytes.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"bool",notes:"",cppType:"bool",csType:"bool",goType:"bool",javaType:"boolean",phpType:"boolean",pythonType:"boolean",rubyType:"TrueClass/FalseClass"},{protoType:"string",notes:"A string must always contain UTF-8 encoded or 7-bit ASCII text.",cppType:"string",csType:"string",goType:"string",javaType:"String",phpType:"string",pythonType:"str/unicode",rubyType:"String (UTF-8)"},{protoType:"bytes",notes:"May contain any arbitrary sequence of bytes.",cppType:"string",csType:"ByteString",goType:"[]byte",javaType:"ByteString",phpType:"string",pythonType:"str",rubyType:"String (ASCII-8BIT)"}]},typefiles:{files:[{name:"protobuf/types/event.proto",description:"",package:"mesg.types",hasEnums:!1,hasExtensions:!1,hasMessages:!0,hasServices:!1,enums:[],extensions:[],messages:[{name:"Event",longName:"Event",fullName:"mesg.types.Event",description:"Event represents a single event run in engine.",hasExtensions:!1,hasFields:!0,extensions:[],fields:[{name:"hash",description:"Hash is a unique hash to identify event.",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""},{name:"instanceHash",description:"instanceHash is hash of instance that can proceed an execution.",label:"",type:"bytes",longType:"bytes",fullType:"bytes",ismap:!1,defaultValue:""},{name:"key",description:"key is the key of the event.",label:"",type:"string",longType:"string",fullType:"string",ismap:!1,defaultValue:""},{name:"data",description:"data is the data for the event.",label:"",type:"Struct",longType:"mesg.protobuf.Struct",fullType:"mesg.protobuf.Struct",ismap:!1,defaultValue:""}]}],services:[]}],scalarValueTypes:[{protoType:"double",notes:"",cppType:"double",csType:"double",goType:"float64",javaType:"double",phpType:"float",pythonType:"float",rubyType:"Float"},{protoType:"float",notes:"",cppType:"float",csType:"float",goType:"float32",javaType:"float",phpType:"float",pythonType:"float",rubyType:"Float"},{protoType:"int32",notes:"Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"int64",notes:"Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"uint32",notes:"Uses variable-length encoding.",cppType:"uint32",csType:"uint",goType:"uint32",javaType:"int",phpType:"integer",pythonType:"int/long",rubyType:"Bignum or Fixnum (as required)"},{protoType:"uint64",notes:"Uses variable-length encoding.",cppType:"uint64",csType:"ulong",goType:"uint64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sint32",notes:"Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sint64",notes:"Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"fixed32",notes:"Always four bytes. More efficient than uint32 if values are often greater than 2^28.",cppType:"uint32",csType:"uint",goType:"uint32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"fixed64",notes:"Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",cppType:"uint64",csType:"ulong",goType:"uint64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"sfixed32",notes:"Always four bytes.",cppType:"int32",csType:"int",goType:"int32",javaType:"int",phpType:"integer",pythonType:"int",rubyType:"Bignum or Fixnum (as required)"},{protoType:"sfixed64",notes:"Always eight bytes.",cppType:"int64",csType:"long",goType:"int64",javaType:"long",phpType:"integer/string",pythonType:"int/long",rubyType:"Bignum"},{protoType:"bool",notes:"",cppType:"bool",csType:"bool",goType:"bool",javaType:"boolean",phpType:"boolean",pythonType:"boolean",rubyType:"TrueClass/FalseClass"},{protoType:"string",notes:"A string must always contain UTF-8 encoded or 7-bit ASCII text.",cppType:"string",csType:"string",goType:"string",javaType:"String",phpType:"string",pythonType:"str/unicode",rubyType:"String (UTF-8)"},{protoType:"bytes",notes:"May contain any arbitrary sequence of bytes.",cppType:"string",csType:"ByteString",goType:"[]byte",javaType:"ByteString",phpType:"string",pythonType:"str",rubyType:"String (ASCII-8BIT)"}]}}})],1)}),[],!1,null,null,null);t.default=s.exports}}]);